"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
var https_1 = require("https");
var http_1 = require("http");
var make_form_date_1 = require("./helpers/make_form_date");
var parse_response_1 = require("./helpers/parse_response");
var parse_url_1 = require("./helpers/parse_url");
var Request = /** @class */ (function () {
    // TODO: support before/after filters
    function Request() {
    }
    Request.prototype.request = function (url, method, options) {
        options = __assign({}, options);
        var isForm = options.form === true;
        var hasData = (method === 'POST' || method === 'PUT') && options.data;
        var _a = options.headers, headers = _a === void 0 ? {} : _a;
        var data;
        var form;
        if (hasData) {
            if (isForm) {
                form = make_form_date_1.makeFormDate(options.data);
                headers = __assign(__assign({}, headers), form.getHeaders());
            }
            else {
                data = JSON.stringify(options.data);
                headers['Content-Type'] = 'application/json';
            }
        }
        // NOTE: is header 'Content-Length': data.length needed?
        var parsedUrl = parse_url_1.parseUrl(url, options.params);
        var requestOptions = {
            hostname: parsedUrl.hostname,
            path: parsedUrl.path,
            port: options.port,
            method: method,
            headers: headers,
        };
        return new Promise(function (resolve, reject) {
            var successHandler = function (res) {
                var status = res.statusCode;
                var body = '';
                res.on('data', function (chunk) {
                    body += chunk;
                });
                res.on('end', function () {
                    var result = parse_response_1.parseResponse(status, body);
                    if (status >= 200 && status < 300) {
                        resolve(result);
                    }
                    else {
                        reject(result);
                    }
                });
            };
            var req = parsedUrl.isHttps
                ? https_1.request(requestOptions, successHandler)
                : http_1.request(requestOptions, successHandler);
            req.on('error', function (error) {
                reject({
                    status: 500,
                    data: {
                        code: 'https_system_error',
                        error: error,
                    },
                });
            });
            if (hasData) {
                if (isForm) {
                    form.pipe(req);
                }
                else {
                    req.write(data);
                }
            }
            req.end();
        });
    };
    return Request;
}());
exports.Request = Request;
